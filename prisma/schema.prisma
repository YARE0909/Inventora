generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customers {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  contactPerson   String
  email           String
  phone           String
  customerGST     String?
  billingAddress  String
  shippingAddress String
  createdOn       DateTime
  orders          Orders[]
  invoices        Invoices[]
}

model Orders {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber         String                @unique
  orderDate           DateTime
  proformaInvoice     String
  proformaInvoiceDate DateTime
  orderValue          Float
  orderCount          Int
  orderDeliveryDate   DateTime
  orderStatus         OrderStatus           @default(Active)
  orderComments       String?
  createdOn           DateTime
  customerId          String                @db.ObjectId
  customer            Customers             @relation(fields: [customerId], references: [id])
  orderItems          OrderItems[]
  invoices            Invoices[]
  orderAdvanceDetails OrderAdvanceDetails[]
}

model OrderAdvanceDetails {
  id                         String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId                    String        @db.ObjectId
  orderAdvanceAmount         Float
  orderAdvanceDate           DateTime
  orderAdvancePaymentDetails String?
  orderAdvanceStatus         PaymentStatus @default(Pending)
  orderAdvanceComments       String?
  createdOn                  DateTime
  order                      Orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Products {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  gstCodeId    String         @db.ObjectId
  createdOn    DateTime
  gstCode      GstCodes       @relation(fields: [gstCodeId], references: [id])
  orderItems   OrderItems[]
  invoiceItems InvoiceItems[]
}

model Gst {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  taxPercentage Float
  isActive      Boolean
  createdOn     DateTime
  gstCodes      GstCodes[] // One-to-many relationship with GstCodes
}

model GstCodes {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  code               String
  name               String
  effectiveStartDate DateTime
  effectiveEndDate   DateTime?
  isActive           Boolean
  createdOn          DateTime
  gstId              String         @db.ObjectId
  gst                Gst            @relation(fields: [gstId], references: [id])
  products           Products[]
  invoiceItems       InvoiceItems[]
  service            Service[]
}

model OrderItems {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int
  unitPrice   Float
  totalAmount Float
  createdOn   DateTime
  order       Orders   @relation(fields: [orderId], references: [id])
  product     Products @relation(fields: [productId], references: [id])
}

model Invoices {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId                 String         @db.ObjectId
  customerId              String         @db.ObjectId
  invoiceNumber           String
  invoiceDate             DateTime
  invoiceAmount           Float
  adjustedInvoiceAmount   Float
  reconciledInvoiceAmount Float
  reconcileComments       String
  discountAmount          Float
  customerGst             String
  invoiceComments         String?
  createdOn               DateTime
  order                   Orders         @relation(fields: [orderId], references: [id])
  customer                Customers      @relation(fields: [customerId], references: [id])
  invoiceItems            InvoiceItems[]
  payments                Payments[]
}

model InvoiceItems {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId     String    @db.ObjectId
  serviceId     String?   @db.ObjectId
  productId     String?   @db.ObjectId
  itemQuantity  Int
  itemRate      Float
  invoiceAmount Float
  gstCodeId     String    @db.ObjectId
  createdOn     DateTime
  gstCode       GstCodes  @relation(fields: [gstCodeId], references: [id])
  invoice       Invoices  @relation(fields: [invoiceId], references: [id])
  service       Service?  @relation(fields: [serviceId], references: [id])
  product       Products? @relation(fields: [productId], references: [id])
}

model Service {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  gstCodeId          String         @db.ObjectId
  effectiveStartDate DateTime
  effectiveEndDate   DateTime
  isActive           Boolean
  createdOn          DateTime
  gstCode            GstCodes       @relation(fields: [gstCodeId], references: [id])
  InvoiceItems       InvoiceItems[]
}

model Payments {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId          String        @db.ObjectId
  paymentMode        String
  paymentDate        DateTime
  paymentAmount      Float
  paymentReferenceId String
  paymentDetails     String?
  paymentComments    String?
  paymentStatus      PaymentStatus @default(Pending)
  createdOn          DateTime
  invoice            Invoices      @relation(fields: [invoiceId], references: [id])
}

enum OrderStatus {
  Active
  OnHold
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
}
