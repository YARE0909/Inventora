// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customers {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  contactPerson   String
  email           String
  phone           String
  billingAddress  String
  shippingAddress String
  createdBy       Int
  createdOn       DateTime
  orders          Orders[]
  invoices        Invoices[]
}

model Orders {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber         String       @unique
  orderDate           DateTime
  proformaInvoice     String
  proformaInvoiceDate DateTime
  orderValue          Float
  orderCount          Int
  orderDeliveryDate   DateTime
  orderStatus         OrderStatus  @default(Active)
  orderComments       String?
  createdBy           Int
  createdOn           DateTime
  customerId          String       @db.ObjectId
  customer            Customers    @relation(fields: [customerId], references: [id])
  orderItems          OrderItems[]
  invoices            Invoices[]
}

model Products {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  gstId        String         @db.ObjectId
  createdBy    Int
  createdOn    DateTime
  gst          Gst            @relation(fields: [gstId], references: [id])
  orderItems   OrderItems[]
  invoiceItems InvoiceItems[]
}

model Gst {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  gstRate      Float
  gstType      String
  createdBy    Int
  createdOn    DateTime
  products     Products[]
  invoiceItems InvoiceItems[]
}

model OrderItems {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int
  unitPrice   Float
  totalAmount Float
  createdBy   Int
  createdOn   DateTime
  order       Orders   @relation(fields: [orderId], references: [id])
  product     Products @relation(fields: [productId], references: [id])
}

model Invoices {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId                 String         @db.ObjectId
  customerId              String         @db.ObjectId
  invoiceNumber           String
  invoiceDate             DateTime
  invoiceAmount           Float
  adjustedInvoiceAmount   Float
  reconciledInvoiceAmount Float
  packagingChargesAmount  Float
  shippingChargesAmount   Float
  discountAmount          Float
  customerGst             String
  invoiceComments         String?
  createdBy               Int
  createdOn               DateTime
  order                   Orders         @relation(fields: [orderId], references: [id])
  customer                Customers      @relation(fields: [customerId], references: [id])
  invoiceItems            InvoiceItems[]
  payments                Payments[]
}

model InvoiceItems {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId     String   @db.ObjectId
  productId     String   @db.ObjectId
  itemCode      String
  itemQuantity  Int
  itemRate      Float
  invoiceAmount Float
  itemGstId     String   @db.ObjectId
  itemGstValue  Float
  createdBy     Int
  createdOn     DateTime
  invoice       Invoices @relation(fields: [invoiceId], references: [id])
  product       Products @relation(fields: [productId], references: [id])
  gst           Gst      @relation(fields: [itemGstId], references: [id])
}

model Payments {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId          String        @db.ObjectId
  paymentMode        String
  paymentDate        DateTime
  paymentAmount      Float
  paymentReferenceId String
  paymentDetails     String?
  paymentComments    String?
  paymentStatus      PaymentStatus @default(Pending)
  createdBy          Int
  createdOn          DateTime
  invoice            Invoices      @relation(fields: [invoiceId], references: [id])
}

enum OrderStatus {
  Active
  OnHold
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
}
